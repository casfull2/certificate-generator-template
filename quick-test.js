#!/usr/bin/env node

/**
 * –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã Certificate Generator
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node quick-test.js
 */

const https = require('https');
const http = require('http');
const { URL } = require('url');
const fs = require('fs');
const path = require('path');

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
let config = {};
try {
  const configPath = path.join(__dirname, 'client-config.json');
  if (fs.existsSync(configPath)) {
    config = JSON.parse(fs.readFileSync(configPath, 'utf8'));
  }
} catch (error) {
  console.log('‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å client-config.json');
}

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const BASE_URL = process.argv[2] || process.env.BASE_URL || 'http://localhost:3000';
const API_KEY = process.argv[3] || config.tilda_integration?.api_key || process.env.API_KEY || 'your-secret-api-key-here';

console.log('üß™ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ CERTIFICATE GENERATOR');
console.log('=====================================');
console.log('üè¢ –ö–ª–∏–µ–Ω—Ç:', config.client_info?.name || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
console.log('üåê URL:', BASE_URL);
console.log('üîë API Key:', API_KEY.substring(0, 8) + '...');
console.log('');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;

    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`,
        ...options.headers
      }
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : {};
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

async function runQuickTest() {
  let testsPassed = 0;
  let totalTests = 0;

  function test(name, condition, details = '') {
    totalTests++;
    if (condition) {
      console.log(`‚úÖ ${name}`);
      if (details) console.log(`   ${details}`);
      testsPassed++;
    } else {
      console.log(`‚ùå ${name}`);
      if (details) console.log(`   ${details}`);
    }
  }

  console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É...');
  try {
    const health = await makeRequest(`${BASE_URL}/health`);
    test('–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç', health.status === 200, `–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${Math.round(health.data.uptime || 0)}—Å`);
  } catch (error) {
    test('–°–µ—Ä–≤–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç', false, `–û—à–∏–±–∫–∞: ${error.message}`);
    return;
  }

  console.log('');
  console.log('2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
  try {
    const docs = await makeRequest(`${BASE_URL}/`);
    test('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', docs.status === 200);
    test('–ö–ª–∏–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω', docs.data.client && docs.data.client !== '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω', docs.data.client);
  } catch (error) {
    test('API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è', false, error.message);
  }

  console.log('');
  console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  try {
    const templates = await makeRequest(`${BASE_URL}/api/v1/templates`);
    test('API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç', templates.status === 200);
    test('–®–∞–±–ª–æ–Ω—ã –¥–æ—Å—Ç—É–ø–Ω—ã', templates.data.templates !== undefined, `–ù–∞–π–¥–µ–Ω–æ: ${templates.data.templates?.length || 0}`);
  } catch (error) {
    test('API –∫–ª—é—á —Ä–∞–±–æ—Ç–∞–µ—Ç', false, error.message);
  }

  console.log('');
  console.log('4Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
  
  const testCertData = {
    template_id: config.certificate_template?.template_id || 'test-template-001',
    first_name: '–¢–µ—Å—Ç',
    last_name: '–¢–µ—Å—Ç–æ–≤',
    recipient_email: 'test@example.com',
    amount: 1000,
    message: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç ' + (config.client_info?.name || 'Certificate Generator'),
    from_name: config.client_info?.name || '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
  };

  try {
    const certResult = await makeRequest(`${BASE_URL}/api/v1/certificates`, {
      method: 'POST',
      body: testCertData
    });

    test('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è', certResult.status === 201 || certResult.status === 200);
    
    if (certResult.status === 201 || certResult.status === 200) {
      test('PDF URL –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è', !!certResult.data.pdf_url, certResult.data.pdf_url);
      test('–ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è', !!certResult.data.verification_url);
      
      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      if (certResult.data.certificate_id) {
        console.log('');
        console.log('5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
        
        const getCert = await makeRequest(`${BASE_URL}/api/v1/certificates/${certResult.data.certificate_id}`);
        test('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø–æ ID', getCert.status === 200);
        test('–î–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã', getCert.data.first_name === '–¢–µ—Å—Ç' && getCert.data.last_name === '–¢–µ—Å—Ç–æ–≤');
      }
    } else if (certResult.status === 422) {
      test('–í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', true, '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–∞');
    }
  } catch (error) {
    test('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–µ—Ç—Å—è', false, error.message);
  }

  console.log('');
  console.log('6Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  try {
    const verify = await makeRequest(`${BASE_URL}/api/v1/verify/FAKE-CODE-123`, {
      headers: {} // –£–±–∏—Ä–∞–µ–º Authorization –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ endpoint
    });
    test('–ü—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', verify.status === 404, '–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è');
  } catch (error) {
    test('–ü—É–±–ª–∏—á–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç', false, error.message);
  }

  console.log('');
  console.log('7Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏...');
  try {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∞–¥–º–∏–Ω–∫–∞ –æ—Ç–≤–µ—á–∞–µ—Ç (–±–µ–∑ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏)
    const admin = await makeRequest(`${BASE_URL}/admin`, {
      headers: { 'Authorization': '' } // –£–±–∏—Ä–∞–µ–º API –∫–ª—é—á
    });
    test('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞', admin.status === 401, '–¢—Ä–µ–±—É–µ—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é - —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
  } catch (error) {
    test('–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞', false, error.message);
  }

  console.log('');
  console.log('üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø');
  console.log('==========================');
  console.log(`‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ: ${testsPassed}/${totalTests} —Ç–µ—Å—Ç–æ–≤`);
  
  if (testsPassed === totalTests) {
    console.log('üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.');
  } else if (testsPassed >= totalTests * 0.8) {
    console.log('‚ö†Ô∏è  –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ.');
  } else {
    console.log('‚ùå –ú–Ω–æ–≥–æ –æ—à–∏–±–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.');
  }

  console.log('');
  console.log('üìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:');
  
  if (testsPassed === totalTests) {
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', `${BASE_URL}/admin`);
    console.log('2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ PDF —à–∞–±–ª–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞');
    console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –≤ Tilda —Å webhook:', `${BASE_URL}/api/v1/certificates`);
    console.log('4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—ã');
  } else {
    console.log('1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    console.log('2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω');
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ client-config.json');
    console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞');
  }

  console.log('');
  console.log('üîó –ü–æ–ª–µ–∑–Ω—ã–µ —Å—Å—ã–ª–∫–∏:');
  console.log('- API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:', `${BASE_URL}/`);
  console.log('- –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', `${BASE_URL}/admin`);
  console.log('- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è:', `${BASE_URL}/health`);
  console.log('- Webhook URL –¥–ª—è Tilda:', `${BASE_URL}/api/v1/certificates`);
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤...\n');
runQuickTest().catch(error => {
  console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
  process.exit(1);
});
