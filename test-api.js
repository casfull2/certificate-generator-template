#!/usr/bin/env node

/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API Certificate Generator
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-api.js [base-url] [api-key]
 */

const https = require('https');
const http = require('http');
const { URL } = require('url');

// –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const BASE_URL = process.argv[2] || 'http://localhost:3000';
const API_KEY = process.argv[3] || 'your-secret-api-key-here';

console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Certificate Generator API');
console.log('üìç URL:', BASE_URL);
console.log('üîë API Key:', API_KEY.substring(0, 8) + '...');
console.log('');

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const client = isHttps ? https : http;

    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${API_KEY}`,
        ...options.headers
      }
    };

    const req = client.request(requestOptions, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = data ? JSON.parse(data) : {};
          resolve({ status: res.statusCode, data: jsonData });
        } catch (e) {
          resolve({ status: res.statusCode, data: data });
        }
      });
    });

    req.on('error', reject);

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// –¢–µ—Å—Ç—ã
async function runTests() {
  console.log('1Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–µ—Ä–∞...');
  try {
    const health = await makeRequest(`${BASE_URL}/health`);
    if (health.status === 200) {
      console.log('‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   Uptime:', Math.round(health.data.uptime), '—Å–µ–∫—É–Ω–¥');
    } else {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:', health.status);
      return;
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É:', error.message);
    return;
  }

  console.log('');
  console.log('2Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏...');
  try {
    const docs = await makeRequest(`${BASE_URL}/`);
    if (docs.status === 200) {
      console.log('‚úÖ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞');
      console.log('   –í–µ—Ä—Å–∏—è:', docs.data.version);
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:', error.message);
  }

  console.log('');
  console.log('3Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  try {
    const templates = await makeRequest(`${BASE_URL}/api/v1/templates`);
    if (templates.status === 200) {
      console.log('‚úÖ –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log('   –®–∞–±–ª–æ–Ω–æ–≤ –Ω–∞–π–¥–µ–Ω–æ:', templates.data.templates?.length || 0);
    } else if (templates.status === 401 || templates.status === 403) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ API_KEY');
      return;
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:', templates.status);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', error.message);
    return;
  }

  console.log('');
  console.log('4Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
  
  const testCertificate = {
    template_id: 'test-template-001',
    first_name: '–¢–µ—Å—Ç',
    last_name: '–¢–µ—Å—Ç–æ–≤',
    recipient_email: 'test@example.com',
    amount: 1000,
    message: '–¢–µ—Å—Ç–æ–≤—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
    from_name: '–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è'
  };

  try {
    const result = await makeRequest(`${BASE_URL}/api/v1/certificates`, {
      method: 'POST',
      body: testCertificate
    });

    if (result.status === 201) {
      console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ');
      console.log('   ID:', result.data.certificate_id);
      console.log('   PDF URL:', result.data.pdf_url);
      console.log('   –ü—Ä–æ–≤–µ—Ä–∫–∞:', result.data.verification_url);

      // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
      console.log('');
      console.log('5Ô∏è‚É£  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...');
      
      const getCert = await makeRequest(`${BASE_URL}/api/v1/certificates/${result.data.certificate_id}`);
      if (getCert.status === 200) {
        console.log('‚úÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞–π–¥–µ–Ω');
        console.log('   –ü–æ–ª—É—á–∞—Ç–µ–ª—å:', getCert.data.first_name, getCert.data.last_name);
        console.log('   –°—Ç–∞—Ç—É—Å:', getCert.data.status);
      } else {
        console.log('‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', getCert.status);
      }

    } else if (result.status === 422) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
      console.log('   –î–µ—Ç–∞–ª–∏:', result.data.details);
    } else {
      console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', result.status);
      console.log('   –û—Ç–≤–µ—Ç:', result.data);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', error.message);
  }

  console.log('');
  console.log('6Ô∏è‚É£  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏...');
  
  try {
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
    const verify = await makeRequest(`${BASE_URL}/api/v1/verify/FAKE-CODE-123`, {
      headers: {} // –£–±–∏—Ä–∞–µ–º Authorization –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ endpoint
    });
    
    if (verify.status === 404) {
      console.log('‚úÖ –ü—É–±–ª–∏—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç (–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è)');
    } else {
      console.log('‚ö†Ô∏è  –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –ø—É–±–ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', verify.status);
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—É–±–ª–∏—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏:', error.message);
  }

  console.log('');
  console.log('üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('');
  console.log('üìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
  console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:', `${BASE_URL}/admin`);
  console.log('2. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–≤–æ–π —à–∞–±–ª–æ–Ω PDF');
  console.log('3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å Tilda');
  console.log('4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email –∏ Google Sheets –≤ –∞–¥–º–∏–Ω–∫–µ');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests().catch(console.error);
