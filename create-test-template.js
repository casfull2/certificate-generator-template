#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —à–∞–±–ª–æ–Ω–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node create-test-template.js
 */

const fs = require('fs');
const path = require('path');
const { PDFDocument, rgb, StandardFonts } = require('pdf-lib');

async function createTestTemplate() {
  console.log('üé® –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ PDF —à–∞–±–ª–æ–Ω–∞...');

  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π PDF –¥–æ–∫—É–º–µ–Ω—Ç
    const pdfDoc = await PDFDocument.create();
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É A4
    const page = pdfDoc.addPage([595.28, 841.89]); // A4 –≤ points
    const { width, height } = page.getSize();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —à—Ä–∏—Ñ—Ç—ã
    const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
    const boldFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);
    const titleFont = await pdfDoc.embedFont(StandardFonts.HelveticaBold);

    // –¶–≤–µ—Ç–∞
    const darkBlue = rgb(0.1, 0.2, 0.5);
    const gold = rgb(0.8, 0.6, 0.1);
    const gray = rgb(0.4, 0.4, 0.4);

    // –†–∞–º–∫–∞
    page.drawRectangle({
      x: 40,
      y: 40,
      width: width - 80,
      height: height - 80,
      borderColor: darkBlue,
      borderWidth: 3,
    });

    // –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–º–∫–∞
    page.drawRectangle({
      x: 60,
      y: 60,
      width: width - 120,
      height: height - 120,
      borderColor: gold,
      borderWidth: 1,
    });

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    page.drawText('–ü–û–î–ê–†–û–ß–ù–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢', {
      x: width / 2 - 180,
      y: height - 150,
      size: 28,
      font: titleFont,
      color: darkBlue,
    });

    // –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    page.drawText('–Ω–∞ —É—Å–ª—É–≥–∏ –∫–æ–º–ø–∞–Ω–∏–∏', {
      x: width / 2 - 80,
      y: height - 190,
      size: 16,
      font: font,
      color: gray,
    });

    // –î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –ª–∏–Ω–∏—è
    page.drawLine({
      start: { x: 100, y: height - 220 },
      end: { x: width - 100, y: height - 220 },
      thickness: 2,
      color: gold,
    });

    // –¢–µ–∫—Å—Ç "–ù–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω"
    page.drawText('–ù–∞—Å—Ç–æ—è—â–∏–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–Ω', {
      x: width / 2 - 120,
      y: height - 280,
      size: 16,
      font: font,
      color: rgb(0, 0, 0),
    });

    // –ú–µ—Å—Ç–æ –¥–ª—è –∏–º–µ–Ω–∏ (–±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω—è—Ç—å—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    // –†–∏—Å—É–µ–º –ª–∏–Ω–∏—é –¥–ª—è –Ω–∞–≥–ª—è–¥–Ω–æ—Å—Ç–∏ –≥–¥–µ –±—É–¥–µ—Ç –∏–º—è
    page.drawLine({
      start: { x: 200, y: height - 320 },
      end: { x: width - 200, y: height - 320 },
      thickness: 1,
      color: gray,
      dashArray: [3, 3],
    });
    
    page.drawText('[–ò–ú–Ø –§–ê–ú–ò–õ–ò–Ø]', {
      x: width / 2 - 60,
      y: height - 315,
      size: 12,
      font: font,
      color: rgb(0.7, 0.7, 0.7),
    });

    // –¢–µ–∫—Å—Ç "–Ω–∞ —Å—É–º–º—É"
    page.drawText('–Ω–∞ —Å—É–º–º—É', {
      x: width / 2 - 40,
      y: height - 370,
      size: 16,
      font: font,
      color: rgb(0, 0, 0),
    });

    // –ú–µ—Å—Ç–æ –¥–ª—è —Å—É–º–º—ã
    page.drawRectangle({
      x: width / 2 - 80,
      y: height - 420,
      width: 160,
      height: 40,
      borderColor: gold,
      borderWidth: 2,
    });

    page.drawText('[–°–£–ú–ú–ê]', {
      x: width / 2 - 30,
      y: height - 405,
      size: 12,
      font: font,
      color: rgb(0.7, 0.7, 0.7),
    });

    // –£—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    page.drawText('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –≥–æ–¥–∞ —Å –¥–∞—Ç—ã –≤—ã–¥–∞—á–∏', {
      x: width / 2 - 150,
      y: height - 480,
      size: 12,
      font: font,
      color: gray,
    });

    page.drawText('–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –≤–æ–∑–≤—Ä–∞—Ç—É –∏ –æ–±–º–µ–Ω—É –Ω–∞ –¥–µ–Ω–µ–∂–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞', {
      x: width / 2 - 170,
      y: height - 500,
      size: 12,
      font: font,
      color: gray,
    });

    // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
    page.drawText('–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: [–î–ê–¢–ê]', {
      x: 100,
      y: 150,
      size: 12,
      font: font,
      color: gray,
    });

    // –ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    page.drawText('–ö–æ–¥: [–ö–û–î_–°–ï–†–¢–ò–§–ò–ö–ê–¢–ê]', {
      x: width - 200,
      y: 150,
      size: 10,
      font: font,
      color: gray,
    });

    // –ü–æ–¥–ø–∏—Å—å/–ø–µ—á–∞—Ç—å –º–µ—Å—Ç–æ
    page.drawText('–ü–æ–¥–ø–∏—Å—å:', {
      x: 100,
      y: 100,
      size: 12,
      font: font,
      color: gray,
    });

    page.drawLine({
      start: { x: 160, y: 100 },
      end: { x: 300, y: 100 },
      thickness: 1,
      color: gray,
    });

    // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É templates –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    const templatesDir = path.join(__dirname, 'templates');
    if (!fs.existsSync(templatesDir)) {
      fs.mkdirSync(templatesDir, { recursive: true });
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
    const pdfBytes = await pdfDoc.save();
    const outputPath = path.join(templatesDir, 'test-template.pdf');
    fs.writeFileSync(outputPath, pdfBytes);

    console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å–æ–∑–¥–∞–Ω:', outputPath);
    console.log('');
    console.log('üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–µ–π –¥–ª—è field_mapping:');
    console.log(JSON.stringify({
      first_name: { x: 250, y: 515, fontSize: 20, color: '#000000' },
      last_name: { x: 350, y: 515, fontSize: 20, color: '#000000' },
      amount: { x: 275, y: 435, fontSize: 18, color: '#cc9900' },
      issue_date: { x: 180, y: 150, fontSize: 12, color: '#666666' },
      certificate_code: { x: 430, y: 150, fontSize: 10, color: '#666666' },
      message: { x: 100, y: 550, fontSize: 14, color: '#333333', maxWidth: 400 }
    }, null, 2));
    
    console.log('');
    console.log('üöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm start');
    console.log('2. –û—Ç–∫—Ä–æ–π—Ç–µ –∞–¥–º–∏–Ω–∫—É: http://localhost:3000/admin');
    console.log('3. –ò–ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —á–µ—Ä–µ–∑ API:');
    console.log('   curl -X POST http://localhost:3000/api/v1/templates \\');
    console.log('     -H "Authorization: Bearer your-api-key" \\');
    console.log('     -F "template=@templates/test-template.pdf" \\');
    console.log('     -F "name=–¢–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω" \\');
    console.log('     -F \'field_mapping={"first_name":{"x":250,"y":515,"fontSize":20,"color":"#000000"}}\'');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞:', error);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
try {
  require('pdf-lib');
} catch (e) {
  console.error('‚ùå pdf-lib –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: npm install');
  process.exit(1);
}

createTestTemplate();
