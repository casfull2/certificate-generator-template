const express = require('express');
const cors = require('cors');
const helmet = require('helmet');
const rateLimit = require('express-rate-limit');
const path = require('path');
const fs = require('fs');
require('dotenv').config();

// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
let clientConfig = {};
try {
  const configPath = path.join(__dirname, 'client-config.json');
  if (fs.existsSync(configPath)) {
    clientConfig = JSON.parse(fs.readFileSync(configPath, 'utf8'));
    console.log('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', clientConfig.client_info?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–ª–∏–µ–Ω—Ç');
  } else {
    console.log('‚ö†Ô∏è  –§–∞–π–ª client-config.json –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  }
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ client-config.json:', error.message);
}

const certificateRoutes = require('./routes/certificates');
const templateRoutes = require('./routes/templates');
const adminRoutes = require('./routes/admin');
const { initDatabase } = require('./database/init');

const app = express();
const PORT = process.env.PORT || 3000;

// –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
app.use(helmet());
app.use(cors());

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
  max: 100 // –º–∞–∫—Å–∏–º—É–º 100 –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP
});
app.use(limiter);

// –ü–∞—Ä—Å–∏–Ω–≥ JSON
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use('/static', express.static(path.join(__dirname, 'public')));

// –ú–∞—Ä—à—Ä—É—Ç—ã API
app.use('/api/v1/certificates', certificateRoutes);
app.use('/api/v1/templates', templateRoutes);
app.use('/admin', adminRoutes);

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ - –ø—Ä–æ—Å—Ç–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è API
app.get('/', (req, res) => {
  res.json({
    name: 'Certificate Generator API',
    version: '1.0.0',
    client: clientConfig.client_info?.name || '–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω',
    description: clientConfig.client_info?.description || '–°–∏—Å—Ç–µ–º–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤',
    endpoints: {
      'POST /api/v1/certificates': '–°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
      'GET /api/v1/certificates/:id': '–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç',
      'POST /api/v1/templates': '–ó–∞–≥—Ä—É–∑–∏—Ç—å —à–∞–±–ª–æ–Ω',
      'GET /api/v1/templates': '–°–ø–∏—Å–æ–∫ —à–∞–±–ª–æ–Ω–æ–≤',
      'GET /admin': '–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å',
      'GET /api/v1/verify/:code': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (–ø—É–±–ª–∏—á–Ω—ã–π)'
    },
    documentation: '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ API_KEY –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ Authorization: Bearer YOUR_API_KEY',
    tilda_webhook_url: `${process.env.BASE_URL}/api/v1/certificates`
  });
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
app.get('/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    timestamp: new Date().toISOString(),
    uptime: process.uptime()
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞:', err);
  res.status(500).json({ 
    error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞',
    message: process.env.NODE_ENV === 'development' ? err.message : '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫'
  });
});

// 404
app.use('*', (req, res) => {
  res.status(404).json({ error: '–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω' });
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
async function startServer() {
  try {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await initDatabase();
    
    app.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
      console.log(`üìä –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:${PORT}/admin`);
      console.log(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/`);
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();
