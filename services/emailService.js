const nodemailer = require('nodemailer');
const fs = require('fs');
const path = require('path');
const { getDatabase } = require('../database/init');

/**
 * –°–æ–∑–¥–∞–µ—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
 */
function createTransporter() {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Gmail SMTP –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
  return nodemailer.createTransporter({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS // App Password –¥–ª—è Gmail
    }
  });
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–º
 * @param {Object} certificateData - –î–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
 * @param {string} pdfPath - –ü—É—Ç—å –∫ PDF —Ñ–∞–π–ª—É
 */
async function sendEmail(certificateData, pdfPath) {
  try {
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ email –¥–ª—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', certificateData.certificate_id);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      throw new Error('Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ PDF —Ñ–∞–π–ª–∞
    if (!fs.existsSync(pdfPath)) {
      throw new Error(`PDF —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${pdfPath}`);
    }

    const transporter = createTransporter();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–∏—Å—å–º–∞
    const emailText = generateEmailText(certificateData);
    const emailHtml = generateEmailHtml(certificateData);

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∏—Å—å–º–∞
    const mailOptions = {
      from: {
        name: process.env.EMAIL_FROM_NAME || 'Certificate Generator',
        address: process.env.EMAIL_USER
      },
      to: certificateData.recipient_email,
      subject: `–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ ${certificateData.amount} —Ä—É–±.`,
      text: emailText,
      html: emailHtml,
      attachments: [
        {
          filename: `certificate-${certificateData.certificate_code}.pdf`,
          path: pdfPath,
          contentType: 'application/pdf'
        }
      ]
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email
    const info = await transporter.sendMail(mailOptions);
    
    console.log('Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:', info.messageId);

    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –≤ –ë–î
    const db = getDatabase();
    db.run(
      "INSERT INTO email_logs (certificate_id, recipient_email, status) VALUES (?, ?, ?)",
      [certificateData.certificate_id, certificateData.recipient_email, 'sent'],
      (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è email:', err);
        db.close();
      }
    );

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
    const dbUpdate = getDatabase();
    dbUpdate.run(
      "UPDATE certificates SET status = 'sent', sent_at = CURRENT_TIMESTAMP WHERE id = ?",
      [certificateData.certificate_id],
      (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:', err);
        dbUpdate.close();
      }
    );

    return info;

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:', error);
    
    // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ –ë–î
    const db = getDatabase();
    db.run(
      "INSERT INTO email_logs (certificate_id, recipient_email, status, error_message) VALUES (?, ?, ?, ?)",
      [certificateData.certificate_id, certificateData.recipient_email, 'failed', error.message],
      (err) => {
        if (err) console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–∫–∏ email:', err);
        db.close();
      }
    );

    throw error;
  }
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞
 */
function generateEmailText(data) {
  return `
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${data.first_name} ${data.last_name}!

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ —Å—É–º–º—É ${data.amount} —Ä—É–±.

${data.message ? `–°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}` : ''}

–î–µ—Ç–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:
- –ù–æ–º–µ—Ä: ${data.certificate_code}
- –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏: ${formatDate(data.issue_date)}
- –î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: ${formatDate(data.expires_at)}

${data.from_name ? `–û—Ç: ${data.from_name}` : ''}

PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É –ø–∏—Å—å–º—É.

–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ:
${process.env.BASE_URL}/api/v1/verify/${data.certificate_code}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
${process.env.EMAIL_FROM_NAME || 'Certificate Generator'}
  `.trim();
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –≤–µ—Ä—Å–∏—é –ø–∏—Å—å–º–∞
 */
function generateEmailHtml(data) {
  return `
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>–í–∞—à –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</title>
    <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }
        .header { background: #f8f9fa; padding: 20px; border-radius: 8px; margin-bottom: 20px; text-align: center; }
        .certificate-info { background: #e7f3ff; padding: 15px; border-radius: 8px; margin: 20px 0; }
        .amount { font-size: 24px; font-weight: bold; color: #007bff; }
        .code { font-family: monospace; background: #f1f1f1; padding: 5px 10px; border-radius: 4px; }
        .footer { margin-top: 30px; padding-top: 20px; border-top: 1px solid #eee; font-size: 14px; color: #666; }
        .verify-link { display: inline-block; background: #28a745; color: white; padding: 10px 20px; text-decoration: none; border-radius: 5px; margin: 10px 0; }
    </style>
</head>
<body>
    <div class="header">
        <h1>üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!</h1>
        <p>–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç</p>
    </div>

    <p>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, <strong>${data.first_name} ${data.last_name}</strong>!</p>

    <div class="certificate-info">
        <p>–°—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <span class="amount">${data.amount} —Ä—É–±.</span></p>
        ${data.message ? `<p><strong>–°–æ–æ–±—â–µ–Ω–∏–µ:</strong> ${data.message}</p>` : ''}
    </div>

    <h3>–î–µ—Ç–∞–ª–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:</h3>
    <ul>
        <li><strong>–ù–æ–º–µ—Ä:</strong> <span class="code">${data.certificate_code}</span></li>
        <li><strong>–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:</strong> ${formatDate(data.issue_date)}</li>
        <li><strong>–î–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ:</strong> ${formatDate(data.expires_at)}</li>
        ${data.from_name ? `<li><strong>–û—Ç:</strong> ${data.from_name}</li>` : ''}
    </ul>

    <p>PDF —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫ —ç—Ç–æ–º—É –ø–∏—Å—å–º—É.</p>

    <p>
        <a href="${process.env.BASE_URL}/api/v1/verify/${data.certificate_code}" class="verify-link">
            –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
        </a>
    </p>

    <div class="footer">
        <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>
        ${process.env.EMAIL_FROM_NAME || 'Certificate Generator'}</p>
    </div>
</body>
</html>
  `.trim();
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleDateString('ru-RU', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ email
 */
async function testEmailConnection() {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('‚úÖ Email –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ email:', error.message);
    return false;
  }
}

module.exports = {
  sendEmail,
  testEmailConnection
};
